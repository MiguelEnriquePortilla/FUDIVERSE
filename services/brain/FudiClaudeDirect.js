// üß† services/brain/FudiClaudeIntegrated.js
// INTEGRACI√ìN COMPLETA: Vectorizer + Claude = An√°lisis Perfecto

const { createClient } = require('@supabase/supabase-js');
const { FudiIntelligenceEngine } = require('./FudiIntelligenceEngine');

class FudiClaudeIntegrated {
  constructor(supabaseUrl, supabaseKey, anthropicKey) {
    console.log('üß† FudiClaudeIntegrated: Initializing COMPLETE system...');
    
    this.supabase = createClient(supabaseUrl, supabaseKey);
    this.anthropicKey = anthropicKey;
    
    // üéØ INICIALIZAR VECTORIZER
    this.engine = new FudiIntelligenceEngine(supabaseUrl, supabaseKey);
    
    console.log('üî• INTEGRATED-SYSTEM: Vectorizer + Claude = Perfect Intelligence');
    console.log('‚úÖ FudiClaudeIntegrated ready - Restaurant intelligence at maximum power');
  }

  // üéØ MAIN METHOD: An√°lisis completo con datos vectorizados
  async processQuery(message, restaurantId, context = {}) {
    console.log('üß† INTEGRATED-SYSTEM: Processing query with vectorized intelligence...');
    console.log('üìù Query:', message);
    console.log('üè™ Restaurant:', restaurantId);

    try {
      // üî• STEP 1: VECTORIZAR todos los datos del restaurante
      console.log('‚ö° STEP 1: Vectorizing restaurant data...');
      const intelligenceData = await this.engine.transformRestaurantData(restaurantId);
      
      // üß† STEP 2: Claude procesa con datos perfectos
      console.log('‚ö° STEP 2: Claude processing with perfect data...');
      const claudeResponse = await this.claudeProcessWithVectorizedData(
        message, 
        intelligenceData, 
        context
      );

      console.log('‚úÖ INTEGRATED-SYSTEM: Perfect analysis complete');
      
      return {
        success: true,
        response: claudeResponse,
        dataQuality: intelligenceData.restaurantContext.dataQuality,
        metadata: {
          architecture: 'fudi_claude_integrated',
          processingMode: 'vectorized_intelligence',
          dataPoints: intelligenceData.transformationMetadata.dataPoints.total,
          qualityScore: intelligenceData.transformationMetadata.qualityScore,
          vectorizedAt: intelligenceData.transformationMetadata.transformedAt
        }
      };

    } catch (error) {
      console.error('‚ùå INTEGRATED-SYSTEM error:', error);
      return this.handleError(error, message);
    }
  }

  // ü§ñ CLAUDE PROCESSING WITH VECTORIZED DATA
  async claudeProcessWithVectorizedData(message, vectorizedData, userContext) {
    console.log('ü§ñ CLAUDE: Processing with VECTORIZED restaurant intelligence...');

    try {
      // üîë SET ENVIRONMENT VARIABLE FOR AI SDK
      process.env.ANTHROPIC_API_KEY = this.anthropicKey;
      
      const { generateText } = require('ai');
      const { anthropic } = require('@ai-sdk/anthropic');

      // üß† ENHANCED SYSTEM PROMPT with vectorized data
      const systemPrompt = `Eres Claude Sonnet 4, especializado en an√°lisis de restaurantes con datos REALES vectorizados.

IDENTIDAD: Soy Claude, con acceso directo a datos reales del restaurante.

DATOS VECTORIZADOS DEL RESTAURANTE:
${this.formatVectorizedDataForClaude(vectorizedData)}

CALIDAD DE DATOS: ${vectorizedData.restaurantContext.dataQuality.level} (${vectorizedData.restaurantContext.dataQuality.score}/100)

ESTILO CLAUDE - CARACTER√çSTICAS EXACTAS:

PERSONALIDAD CLAUDE (DNA):
- Anal√≠tico pero humano
- Insights espec√≠ficos basados en datos REALES  
- Siempre constructivo y solution-oriented
- Explica conexiones entre datos reales
- Confianza basada en datos verificables

## **Proceso de an√°lisis:**
- Uso datos reales del restaurante
- Identifico patrones espec√≠ficos en los datos
- Comparo per√≠odos con n√∫meros exactos
- Genero insights accionables basados en evidencia
- Explico el "por qu√©" detr√°s de cada patr√≥n

FORMATO VISUAL CLAUDE:
- Headers con ## para estructura clara
- **Negritas** solo para KPIs importantes
- Bullets simples (-) para claridad
- Datos espec√≠ficos con n√∫meros exactos
- Insights organizados por prioridad

## **Tono Claude:**
- Profesional con datos reales
- Insights espec√≠ficos y accionables
- Explicaciones basadas en evidencia
- Conclusiones respaldadas por datos
- Termina con recomendaciones claras

INSTRUCCIONES ESTRICTAS:
- Uso SOLO datos reales del vectorizado
- Cito n√∫meros espec√≠ficos cuando los tengo
- Si no hay datos suficientes, lo explico claramente
- Conecto patrones entre diferentes m√©tricas
- Termino SIEMPRE con ---`;

      const { text } = await generateText({
        model: anthropic('claude-3-5-sonnet-20241022'),
        system: systemPrompt,
        prompt: `Pregunta del usuario: "${message}"

DATOS DISPONIBLES:
- Calidad de datos: ${vectorizedData.restaurantContext.dataQuality.level}
- Intelligence tables: ${vectorizedData.restaurantContext.hasIntelligenceTables ? 'S√ç' : 'NO'}
- Transacciones: ${vectorizedData.rawDataSummary.transactionHistory.available ? vectorizedData.rawDataSummary.transactionHistory.count : 0}
- Productos: ${vectorizedData.rawDataSummary.productCatalog.available ? vectorizedData.rawDataSummary.productCatalog.count : 0}

Usa estos datos reales para dar un an√°lisis espec√≠fico y accionable. Si hay intelligence tables, √∫salas preferentemente. Si no, usa el historial de transacciones.

Responde como Claude con datos espec√≠ficos del restaurante.`,
        temperature: 0.6,
        maxTokens: 2000,
      });

      // Ensure response ends with separator
      const response = text.endsWith('---') ? text : text + '\n\n---';

      console.log('‚úÖ CLAUDE: Vectorized intelligence response generated');
      return response;

    } catch (error) {
      console.error('‚ùå Claude vectorized processing error:', error);
      throw error;
    }
  }

  // üìã FORMAT VECTORIZED DATA FOR CLAUDE
  formatVectorizedDataForClaude(vectorizedData) {
    let formattedContext = '';

    // Restaurant identity
    const restaurant = vectorizedData.restaurantContext.identity;
    formattedContext += `RESTAURANTE: ${restaurant.name || 'Restaurant'} (ID: ${restaurant.id})\n`;
    formattedContext += `PRODUCTOS EN CAT√ÅLOGO: ${vectorizedData.restaurantContext.totalProducts}\n`;
    formattedContext += `CALIDAD DE DATOS: ${vectorizedData.restaurantContext.dataQuality.level} (${vectorizedData.restaurantContext.dataQuality.score}/100)\n\n`;

    // Intelligence tables (preferred data)
    if (vectorizedData.restaurantContext.hasIntelligenceTables) {
      formattedContext += `üìä INTELLIGENCE TABLES DISPONIBLES:\n`;
      
      if (vectorizedData.generatedIntelligence.products.available) {
        formattedContext += `‚úÖ Product Intelligence: ${vectorizedData.generatedIntelligence.products.totalProducts} registros\n`;
        formattedContext += `   Productos top: ${JSON.stringify(vectorizedData.generatedIntelligence.products.topPerformers?.slice(0, 3), null, 2)}\n\n`;
      }

      if (vectorizedData.generatedIntelligence.sales.available) {
        formattedContext += `‚úÖ Sales Intelligence: $${vectorizedData.generatedIntelligence.sales.totalRevenue?.toFixed(2)} revenue total\n`;
        formattedContext += `   Mejor d√≠a: ${JSON.stringify(vectorizedData.generatedIntelligence.sales.bestDay, null, 2)}\n\n`;
      }

      if (vectorizedData.generatedIntelligence.temporal.available) {
        formattedContext += `‚úÖ Temporal Intelligence: Peak hour ${vectorizedData.generatedIntelligence.temporal.peakHour}:00\n`;
        formattedContext += `   Revenue pico: $${vectorizedData.generatedIntelligence.temporal.peakHourRevenue?.toFixed(2)}\n\n`;
      }
    }

    // Transaction history
    if (vectorizedData.rawDataSummary.transactionHistory.available) {
      const txHistory = vectorizedData.rawDataSummary.transactionHistory;
      formattedContext += `üìà HISTORIAL DE TRANSACCIONES:\n`;
      formattedContext += `   Total transacciones: ${txHistory.count}\n`;
      formattedContext += `   Ingresos totales: $${txHistory.totalRevenue?.toFixed(2)}\n`;
      formattedContext += `   Per√≠odo: ${txHistory.dateRange?.from} a ${txHistory.dateRange?.to}\n\n`;
    }

    // Product catalog
    if (vectorizedData.rawDataSummary.productCatalog.available) {
      const catalog = vectorizedData.rawDataSummary.productCatalog;
      formattedContext += `üçΩÔ∏è CAT√ÅLOGO DE PRODUCTOS:\n`;
      formattedContext += `   Total productos: ${catalog.count}\n`;
      formattedContext += `   Rango precios: $${catalog.priceRange?.min} - $${catalog.priceRange?.max}\n\n`;
    }

    // Data quality summary
    formattedContext += `üìä RESUMEN DE DATOS:\n`;
    formattedContext += `   Puntos de datos totales: ${vectorizedData.transformationMetadata.dataPoints.total}\n`;
    formattedContext += `   Transacciones: ${vectorizedData.transformationMetadata.dataPoints.transactions}\n`;
    formattedContext += `   Productos: ${vectorizedData.transformationMetadata.dataPoints.products}\n`;

    return formattedContext;
  }

  // üéØ M√âTODO ESPEC√çFICO PARA AN√ÅLISIS COMPARATIVO
  async analyzeComparative(query, restaurantId, options = {}) {
    console.log('üéØ COMPARATIVE ANALYSIS: Starting comprehensive comparison...');
    
    const {
      comparePeriod = 'week',
      includeProducts = true,
      includePayments = true,
      includeTemporal = true
    } = options;

    try {
      // Vectorizar datos con foco en comparaci√≥n
      const intelligenceData = await this.engine.transformRestaurantData(restaurantId);
      
      // Proceso especializado para an√°lisis comparativo
      const comparativeQuery = `${query}

AN√ÅLISIS ESPEC√çFICO SOLICITADO:
- Per√≠odo de comparaci√≥n: ${comparePeriod}
- Incluir productos: ${includeProducts}
- Incluir m√©todos de pago: ${includePayments}
- Incluir patrones temporales: ${includeTemporal}

Enf√≥cate en:
1. Diferencias espec√≠ficas entre per√≠odos
2. Cambios en productos top
3. Variaciones en horarios pico
4. M√©todos de pago
5. Recomendaciones accionables`;

      const analysis = await this.claudeProcessWithVectorizedData(
        comparativeQuery,
        intelligenceData,
        { analysisType: 'comparative', period: comparePeriod }
      );

      return {
        success: true,
        response: analysis,
        analysisType: 'comparative',
        dataQuality: intelligenceData.restaurantContext.dataQuality,
        metadata: {
          period: comparePeriod,
          dataPoints: intelligenceData.transformationMetadata.dataPoints.total,
          qualityScore: intelligenceData.transformationMetadata.qualityScore
        }
      };

    } catch (error) {
      console.error('‚ùå Comparative analysis error:', error);
      return this.handleError(error, query);
    }
  }

  // üÜò ERROR HANDLING
  async handleError(error, message) {
    console.log('üÜò INTEGRATED-SYSTEM: Handling error gracefully...');
    
    return {
      success: false,
      response: `Disculpa, tuve un problema procesando tu consulta sobre "${message}". Mi sistema integrado est√° experimentando interferencias. Los datos del restaurante podr√≠an no estar completamente vectorizados. ¬øPodr√≠as intentar de nuevo?\n\n---`,
      metadata: {
        architecture: 'fudi_claude_integrated',
        error: true,
        errorMessage: error.message
      }
    };
  }

  // üß™ TEST INTEGRATION
  async testIntegration(restaurantId) {
    console.log('üß™ Testing COMPLETE integration...');
    
    try {
      // Test vectorization
      const intelligenceData = await this.engine.transformRestaurantData(restaurantId);
      
      // Test Claude processing
      const testQuery = "Dame un resumen r√°pido de los datos disponibles";
      const response = await this.claudeProcessWithVectorizedData(testQuery, intelligenceData);
      
      console.log('‚úÖ Integration test successful');
      
      return {
        success: true,
        vectorizationQuality: intelligenceData.restaurantContext.dataQuality,
        dataPoints: intelligenceData.transformationMetadata.dataPoints.total,
        claudeResponse: response.length > 0,
        ready: true
      };

    } catch (error) {
      console.error('‚ùå Integration test failed:', error);
      return {
        success: false,
        error: error.message,
        ready: false
      };
    }
  }

  // üìä SYSTEM STATUS
  getSystemStatus() {
    return {
      architecture: 'fudi_claude_integrated',
      components: ['FudiIntelligenceEngine', 'Claude Direct Processing'],
      dataFlow: 'Restaurant Data ‚Üí Intelligence Transformation ‚Üí Claude Analysis ‚Üí Insights',
      advantages: [
        'Converts shit data into golden insights',
        'Pre-organized intelligence',
        'Real-time Claude processing',
        'Scalable to millions of restaurants',
        'No data mixing between restaurants',
        'Optimized for AI consumption',
        'Perfect data quality from any input'
      ],
      capabilities: [
        'Comparative analysis',
        'Product performance analysis', 
        'Payment method insights',
        'Temporal pattern recognition',
        'Financial intelligence',
        'Actionable recommendations'
      ]
    };
  }
}

module.exports = { FudiClaudeIntegrated };